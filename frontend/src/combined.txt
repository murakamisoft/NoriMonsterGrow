以下が最新のソース一覧
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\App.jsx ----- 
// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './pages/Home';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        {/* 他のルートもここに追加 */}
      </Routes>
    </Router>
  );
};

export default App;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\components\MonsterDisplay.jsx ----- 
import React from 'react';
import useMonster from '../hooks/useMonster';

const MonsterDisplay = ({ playerId }) => {
  const { monster, loading, error } = useMonster(playerId);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error loading monster data.</p>;

  const { image } = monster;
  const imageSrc = `/img/monster.png`;  // 画像ファイルパス
  const spriteStyle = {
    backgroundImage: `url(${imageSrc})`,
    backgroundPosition: `-${image.x}px -${image.y}px`,
    width: '64px',
    height: '64px',
  };

  return (
    <div>
      <h2>{monster.name}</h2>
      <div style={spriteStyle} />
    </div>
  );
};

export default MonsterDisplay;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\components\MonsterImages.jsx ----- 
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const MonsterImages = ({ playerId }) => {
  const [monsterImages, setMonsterImages] = useState([]);

  useEffect(() => {
    const fetchMonsterImages = async () => {
      try {
        // モンスター画像リストを取得
        const response = await axios.get(`http://localhost:8080/api/monsters/${playerId}/monsters`);
        const monsters = response.data;
        setMonsterImages(monsters); // 取得したデータをステートに設定
        console.log(JSON.stringify(monsters));
      } catch (error) {
        console.error('Error fetching monster images:', error);
      }
    };

    fetchMonsterImages();
  }, [playerId]);

  return (
    <div>
      <h2>モンスターの画像</h2>
      <div style={{ display: 'flex', flexWrap: 'nowrap', overflowX: 'auto' }}>
        {monsterImages.map((monster) => (
          <div
            key={monster.monsterId}
            style={{
              width: '64px', // モンスターの画像の幅
              height: '64px', // モンスターの画像の高さ
              backgroundImage: `url(/img/monster/${monster.imgFileName})`, // モンスターの画像を背景として設定
              backgroundSize: 'contain', // 画像を要素のサイズに合わせる
              backgroundRepeat: 'no-repeat', // 画像を繰り返さない
              marginRight: '10px', // モンスター間のスペース
            }}
            title={monster.monsterName}
          >
          </div>
        ))}
      </div>
    </div>
  );
};

export default MonsterImages;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\hooks\useMonster.jsx ----- 
import { useState, useEffect } from 'react';
import axios from 'axios';

const useMonster = (playerId) => {
  const [monster, setMonster] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchMonsterData = async () => {
      try {
        const monsterResponse = await axios.get(`/api/monsters/player/${playerId}`);
        const monster = monsterResponse.data;
        const imageResponse = await axios.get(`/api/monster-images/${monster.imageId}`);
        const imageData = imageResponse.data;

        setMonster({ ...monster, image: imageData });
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchMonsterData();
  }, [playerId]);

  return { monster, loading, error };
};

export default useMonster;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\pages\Home.jsx ----- 
// src/pages/Home.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import '../css/Home.css'; // カスタムスタイルを読み込み

const Home = () => {
  const [player, setPlayer] = useState(null);
  const [monsters, setMonsters] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPlayerData = async () => {
      try {
        const playerResponse = await axios.get('http://localhost:8080/api/players/1'); // プレイヤーIDを1に設定
        setPlayer(playerResponse.data);
        console.log("playerResponse.data : " + JSON.stringify(playerResponse.data));
        // モンスター情報をAPIから取得
        const monstersResponse = await axios.get(`http://localhost:8080/api/monsters/${playerResponse.data.playerId}/monsters`);
        setMonsters(monstersResponse.data);
        console.log("monstersResponse.data : " + JSON.stringify(monstersResponse.data));
      } catch (err) {
        setError('情報の取得に失敗しました。');
      } finally {
        setLoading(false);
      }
    };

    fetchPlayerData();
  }, []);

  if (loading) return <p>読み込み中...</p>;
  if (error) return <p>{error}</p>;

  return (
    <div className="home-container">
      <div className="background-overlay"></div> {/* 背景オーバーレイ */}
      <h1 className="game-title">モンスター育成ゲーム</h1>
      {player && (
        <div className="player-info">
          <h2>プレイヤー情報</h2>
          <p>名前: {player.playerName}</p>
          <p>レベル: {player.lv}</p>
          <p>経験値: {player.experience}</p>

          <h2>所持モンスター</h2>
          <div className="monster-grid">
            {monsters && monsters.length > 0 ? (
              monsters.map((monster) => (
                <div key={monster.monsterId} className="monster-card">
                  <img
                    src={`/img/monster/${monster.imgFileName}`} // モンスターの画像のパスを設定
                    alt={monster.monsterName}
                    className="monster-image" // カスタムクラスを追加
                  />
                  <p className="monster-name">{monster.monsterName} Lv{monster.lv}</p>
                </div>
              ))
            ) : (
              <p>所持モンスターはいません。</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Home;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\pages\PlayerMonsters.jsx ----- 
import React from 'react';
import MonsterDisplay from '../components/MonsterDisplay';

const PlayerMonsters = ({ playerId }) => {
  return (
    <div>
      <h1>Player's Monsters</h1>
      <MonsterDisplay playerId={playerId} />
    </div>
  );
};

export default PlayerMonsters;
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\App.css ----- 
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\index.css ----- 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
   
----- C:\Users\nori\workspace\NoriMonsterGrow\frontend\src\css\Home.css ----- 
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

/* 背景設定 */
body {
  background-image: url('./img/background.jpg');
  background-size: cover;
  background-position: center;
  height: 100vh;
  margin: 0;
  font-family: 'Press Start 2P', cursive;
  color: white;
}

/* タイトルのスタイル */
.game-title {
  font-size: 2.5rem;
  color: #FFD700;
  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7);
  text-align: center;
  margin-top: 20px;
}

/* プレイヤー情報のスタイル */
.player-info {
  text-align: center;
  margin: 20px 0;
  padding: 20px;
  background-color: rgba(255, 255, 255, 0.2);
  /* 明るい半透明背景に変更 */
  border-radius: 15px;
  box-shadow: 0px 0px 15px rgba(255, 255, 255, 0.5);
  /* 明るい影 */
  color: #FFD700;
  /* ゴールドで統一 */
  font-size: 1.1rem;
  /* フォントサイズを大きくして目立たせる */
}

/* モンスターグリッドのスタイル */
.monster-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
}

/* モンスターカードのスタイル */
.monster-card {
  background-color: rgba(255, 255, 255, 0.2);
  /* 明るい背景 */
  border-radius: 10px;
  padding: 15px;
  box-shadow: 0px 0px 20px rgba(255, 255, 255, 0.5);
  /* 明るい影 */
  text-align: center;
  width: 120px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.monster-card:hover {
  transform: scale(1.1);
  box-shadow: 0px 0px 25px rgba(255, 255, 255, 0.7);
  /* ホバー時に明るい影を強調 */
}

/* モンスター画像のスタイル */
.monster-image {
  width: 64px;
  height: 64px;
  margin-bottom: 10px;
  border-radius: 50%;
  transition: transform 0.3s ease;
}

.monster-image:hover {
  transform: rotate(10deg) scale(1.2);
}

/* モンスター名のスタイル */
.monster-name {
  font-size: 1.1rem;
  /* 文字を少し大きく */
  color: #FFFF00;
  /* より明るい黄色に変更 */
  text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.7);
  /* モンスター名にも影を追加 */
}

/* ボタンデザイン */
.button {
  background-color: #32CD32;
  /* 明るいグリーン */
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.button:hover {
  background-color: #3CB371;
}   
